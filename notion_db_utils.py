"""Utility functions for interacting with Notion databases."""
from typing import Dict, List, Optional
try:
    from notion_client import Client
except ModuleNotFoundError:  # pragma: no cover - optional dependency for tests
    Client = None
from config import NOTION_TOKEN, PARENT_PAGE_ID, DEFAULT_USER_ID
from logging_utils import get_logger
import notion_templates as templates
from google_calendar_utils import create_event

log = get_logger(__name__)

# Í∏∞Î≥∏ ÏÉÅÌÉú ÏòµÏÖòÍ≥º ÏÉâÏÉÅÏùÑ Ï†ïÏùò
# ``status`` ÏÜçÏÑ± ÎåÄÏã† ``select`` ÌÉÄÏûÖÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÏÉÅÌÉúÍ∞íÏùÑ Í¥ÄÎ¶¨ÌïúÎã§.
# Notion APIÏóêÏÑú ÏßÄÏõêÌïòÎäî ÏÉâÏÉÅÍ∞íÏù¥ Î∞îÎÄåÎ©¥ ÏïÑÎûò Î¶¨Ïä§Ìä∏Îßå ÏàòÏ†ïÌïòÎ©¥ Îê©ÎãàÎã§.
DEFAULT_SELECT_OPTIONS = [
    {"name": "ÎØ∏Ï≤òÎ¶¨", "color": "default"},
    {"name": "ÏßÑÌñâÏ§ë", "color": "yellow"},
    {"name": "ÏôÑÎ£å", "color": "green"},
    {"name": "Î∞òÎ†§", "color": "red"},
]
DEFAULT_SELECT_NAME = "ÎØ∏Ï≤òÎ¶¨"

# Global notion client that other modules may reuse
if Client and NOTION_TOKEN:
    notion = Client(auth=NOTION_TOKEN)
else:  # pragma: no cover - used when notion-client not installed for tests
    notion = None


def ensure_status_column(
    db_id: str,
    *,
    options: Optional[List[Dict[str, str]]] = None,
    default_name: Optional[str] = None,
) -> None:
    """Ensure the given database has a styled ``ÏÉÅÌÉú`` select property.

    # Î≥ÄÍ≤Ω Ìè¨Ïù∏Ìä∏: Notion APIÏóêÏÑú status ÏÜçÏÑ± Íµ¨Ï°∞Í∞Ä Î∞îÎÄåÎ©¥ ÏïÑÎûò ÏòµÏÖò Íµ¨ÏÑ±
    # ``status_cfg`` Î∂ÄÎ∂ÑÎßå ÏàòÏ†ïÌïòÎ©¥ ÎêúÎã§.

    Parameters
    ----------
    db_id:
        ID of the database to update.
    options:
        List of select option dictionaries with ``name`` and ``color`` keys.
        ``DEFAULT_SELECT_OPTIONS`` is used when omitted.
    default_name:
        Default select name to apply when creating new property.
        ``DEFAULT_SELECT_NAME`` when omitted.

    This helper is used right after creating a database as some templates may
    miss the column or have it defined with a wrong type. If the column is
    missing or not a ``select`` property it will be recreated using
    ``databases.update`` with the given options.
    """
    if not notion:
        log.debug("ÎÖ∏ÏÖò ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÎØ∏ÏÑ§Ï†ï")
        return
    try:
        info = notion.databases.retrieve(db_id)
        prop = info.get("properties", {}).get("ÏÉÅÌÉú")
        need_update = not prop or prop.get("type") != "select"
        if need_update:
            select_cfg = {"options": options or DEFAULT_SELECT_OPTIONS}
            name = default_name or DEFAULT_SELECT_NAME
            if name:
                select_cfg["default"] = {"name": name}
            notion.databases.update(db_id, properties={"ÏÉÅÌÉú": {"select": select_cfg}})
            log.info("ÏÉÅÌÉú(select) Ïª¨ÎüºÏùÑ Î≥¥Ï†ïÌñàÏäµÎãàÎã§: %s", db_id)
    except Exception as exc:  # pragma: no cover - network failures
        log.error("ÏÉÅÌÉú Ïª¨Îüº Î≥¥Ï†ï Ïã§Ìå®: %s - %s", db_id, exc)


def delete_existing_databases(parent_page_id: str = PARENT_PAGE_ID) -> None:
    """Remove all child databases under the given Notion page."""
    if not notion:
        log.debug("ÎÖ∏ÏÖò ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÎØ∏ÏÑ§Ï†ï")
        return
    try:
        cursor = None
        while True:
            if cursor:
                page = notion.blocks.children.list(parent_page_id, start_cursor=cursor)
            else:
                page = notion.blocks.children.list(parent_page_id)
            children = page.get("results", [])
            for block in children:
                if block.get("type") == "child_database":
                    notion.blocks.delete(block_id=block["id"])
                    log.info("Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ %s ÏÇ≠Ï†ú", block["id"])
            cursor = page.get("next_cursor")
            if not cursor:
                break
    except Exception as e:
        log.error("Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÇ≠Ï†ú Ïã§Ìå®: %s", e)


def create_database(template: Dict) -> str:
    """Create a database from a template and return its ID."""
    if not notion:
        raise RuntimeError("ÎÖ∏ÏÖò ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§")
    title_text = template["template_title"]
    properties = {}
    for name, prop in template["properties"].items():
        # Remove helper keys not supported by Notion
        prop = {k: v for k, v in prop.items() if k != "target_template"}
        # Notion requires relation properties to specify the target database.
        # Templates may leave the relation config empty so skip it for now and
        # create it in a second step once all databases exist.
        if prop.get("relation") == {}:
            log.debug("relation ÏÜçÏÑ± %s(%s) ÏùÄ ÌõÑÏ≤òÎ¶¨ Îã®Í≥ÑÏóêÏÑú ÏÉùÏÑ±", name, title_text)
            continue
        properties[name] = prop

    res = notion.databases.create(
        parent={"type": "page_id", "page_id": PARENT_PAGE_ID},
        title=[{"type": "text", "text": {"content": title_text}}],
        icon={"type": "emoji", "emoji": template.get("icon_emoji", "üìÑ")},
        properties=properties,
    )
    log.info("Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ %s ÏÉùÏÑ± ÏôÑÎ£å", title_text)
    db_id = res["id"]
    # Ensure the status column exists right after creation
    ensure_status_column(db_id)
    return db_id


async def create_dummy_data(
    db_id: str,
    template_title: str,
    related_page_ids: Optional[List[str]] = None,
) -> List[str]:
    """Insert sample rows and return created page IDs."""
    if not notion:
        log.debug("ÎÖ∏ÏÖò ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÎØ∏ÏÑ§Ï†ï")
        return
    # Verify the status column exists before inserting sample rows
    ensure_status_column(db_id)
    prop = notion.databases.retrieve(db_id)["properties"]
    if "ÏÉÅÌÉú" not in prop or prop["ÏÉÅÌÉú"].get("type") != "select":
        log.warning("ÏÉÅÌÉú(select) Ïª¨ÎüºÏù¥ ÏóÜÏñ¥ ÏÉùÏÑ±ÏùÑ Í±¥ÎÑàÎúÅÎãàÎã§: %s", db_id)
        return

    tmpl = templates.get_template(template_title) or {}
    items = templates.get_dummy_items(template_title)
    page_ids: List[str] = []
    for item in items:
        props: Dict[str, Dict] = {}
        for key, value in item.items():
            pdef = tmpl.get("properties", {}).get(key, {})
            ptype = next(iter(pdef.keys()), None)
            if ptype == "title":
                props[key] = {"title": [{"text": {"content": value}}]}
            elif ptype == "select":
                props[key] = {"select": {"name": value}}
            elif ptype == "date" and isinstance(value, str):
                if key == "Ï∂úÏû•Í∏∞Í∞Ñ" and "/" in value:
                    start, end = value.split("/")
                    props[key] = {"date": {"start": start, "end": end}}
                else:
                    props[key] = {"date": {"start": value}}
            elif ptype == "number":
                props[key] = {"number": value}
            elif ptype == "files":
                props[key] = {"files": value}
            elif ptype == "people":
                people_ids = []
                for person in value:
                    pid = person.get("id")
                    if pid == "dummy-user" and DEFAULT_USER_ID:
                        people_ids.append({"id": DEFAULT_USER_ID})
                    elif pid and pid != "dummy-user":
                        people_ids.append({"id": pid})
                if people_ids:
                    props[key] = {"people": people_ids}
            elif ptype == "relation":
                ids = value if isinstance(value, list) else [value]
                real_ids = []
                for rid in ids:
                    if rid == "dummy-page":
                        if related_page_ids:
                            if related_page_ids:
                                real_ids.append(related_page_ids.pop(0))
                    elif rid:
                        real_ids.append(rid)
                if real_ids:
                    props[key] = {"relation": [{"id": i} for i in real_ids]}
            else:
                if isinstance(value, list) and value and value[0].get("object") == "user":
                    people_ids = []
                    for person in value:
                        pid = person.get("id")
                        if pid == "dummy-user" and DEFAULT_USER_ID:
                            people_ids.append({"id": DEFAULT_USER_ID})
                        elif pid and pid != "dummy-user":
                            people_ids.append({"id": pid})
                    if people_ids:
                        props[key] = {"people": people_ids}
                elif isinstance(value, str):
                    props[key] = {"rich_text": [{"text": {"content": value}}]}
        res = notion.pages.create(parent={"database_id": db_id}, properties=props)
        page_ids.append(res.get("id", ""))
        if template_title == "ÌöåÏÇ¨ ÏùºÏ†ï Ï∫òÎ¶∞Îçî" and "ÏãúÏûëÏùº" in props:
            create_event(
                props["Ï†úÎ™©"]["title"][0]["text"]["content"],
                props["ÏãúÏûëÏùº"]["date"]["start"],
                props.get("Ï¢ÖÎ£åÏùº", {"date": {"start": props["ÏãúÏûëÏùº"]["date"]["start"]}})["date"]["start"],
                item.get("ÏÑ§Î™Ö", ""),
            )
    log.info("ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ %dÍ±¥ ÏÇΩÏûÖ", len(items))
    return page_ids

def add_relation_columns(db_id_map: Dict[str, str]) -> None:
    """Update databases with relation properties once all IDs are known."""
    if not notion:
        log.debug("ÎÖ∏ÏÖò ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÎØ∏ÏÑ§Ï†ï")
        return

    for tmpl in templates.DATABASE_TEMPLATES:
        db_id = db_id_map.get(tmpl["template_title"])
        if not db_id:
            continue

        updates = {}
        for name, prop in tmpl["properties"].items():
            if prop.get("relation") == {}:
                target_title = prop.get("target_template")
                target_id = db_id_map.get(target_title)
                if target_id:
                    updates[name] = {
                        "relation": {
                            "database_id": target_id,
                            "type": "single_property",
                            "single_property": {},
                        }
                    }
                else:
                    log.warning(
                        "Í¥ÄÍ≥Ñ ÎåÄÏÉÅ %s(%s) ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§", target_title, name
                    )

        if updates:
            try:
                notion.databases.update(db_id, properties=updates)
                log.info("%s Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïùò relation ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å", tmpl["template_title"])
            except Exception as exc:
                log.error("relation ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå® %s: %s", db_id, exc)

# Example usage:
# db_id = create_database(templates.DATABASE_TEMPLATES[0])
# asyncio.run(create_dummy_data(db_id, "Ï∂úÏû• ÏöîÏ≤≠ÏÑú"))
